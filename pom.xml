<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<!--
	  	General project information
	-->
    <modelVersion>4.0.0</modelVersion>
    <groupId>ultimate</groupId>
    <artifactId>pong</artifactId>
    <packaging>pom</packaging>
    <version>1.0.0</version>
	<name>pong</name>

	<!--
		This is just a parent pom that manages the following child modules.
		This way information may be shared between those modules and all
		modules may be built at once. This keeps the individual poms as
		small and clear as possible.
	-->
    <modules>
        <module>PongServer</module>
    </modules>

	<!--
	  	The maven version used
	-->
    <prerequisites>
        <maven>2.2.1</maven>
    </prerequisites>

	<!--
	  	The plugin configuration for this parent pom and all its child modules.
	-->
    <build>
        <defaultGoal>install</defaultGoal>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.7</source>
                    <target>1.7</target>
                    <encoding>ISO-8859-1</encoding>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.1.1</version>
				<configuration>
					<webappDirectory>target/webapp</webappDirectory>
					<attachClasses>true</attachClasses>
				</configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-eclipse-plugin</artifactId>
                <version>2.8</version>
                <configuration>
                    <downloadSources>true</downloadSources>
                    <downloadJavadocs>true</downloadJavadocs>
                    <projectNameTemplate>[artifactId]</projectNameTemplate>
                    <workspace>${basedir}</workspace>
                </configuration>
            </plugin>
        </plugins>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <testResources>
            <testResource>
                <directory>src/test/resources</directory>
                <filtering>true</filtering>
            </testResource>
        </testResources>
        <extensions>
        </extensions>
    </build>

	<!--
		The list of repositories for downloading the dependencies
	-->
    <repositories>
        <repository>
            <id>central</id>
            <url>http://repo1.maven.org/maven2</url>
        </repository>
        <repository>
            <id>mvnrepository.com</id>
            <url>http://mvnrepository.com</url>
        </repository>
        <repository>
            <id>maven2-repository.dev.java.net</id>
            <url>http://download.java.net/maven/2</url>
        </repository>
        <repository>
            <id>glassfish-repository.dev.java.net</id>
            <url>http://download.java.net/maven/glassfish</url>
        </repository>
    </repositories>

    <pluginRepositories>
        <!-- no additional plugin repos -->
    </pluginRepositories>

	<!--
		Global dependencies for all modules
		Note: the example dependencies defined here are in the test scope only.
		This means they are available in eclipse but will only be used for compiling
		and running tests and not be deployed/packaged with the final application.
		Note 2: Some other dependencies used in the modules are dependent on a log4j
		implementation, too. In order to prevent version conflicts we are using log4j
		and the slf4j bridge in tests only and rely on the version automatically included
		by dependency for the final build.
		Note 3: Since some frameworks consist of multiple artifacts it is helpful to
		use properties for the version. This way the version can be managed at a single
		location for all those libraries and searching for the dependencies is reduced.
		The properties are defined at the end of the pom.
	-->
    <dependencies>
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>${log4j.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>${slf4j.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

	<!--
		We could define different profiles here. Each profile may (re)configure additional plugins,
		repositories, dependencies, properties and more so a custom build may be made using this profile.
	-->
    <profiles>
    </profiles>

	<!--
		Properties (e.g. version numbers) are defined here for easier configuration.
	-->
    <properties>
        <junit.version>4.10</junit.version>
        <slf4j.version>1.6.4</slf4j.version>
        <log4j.version>1.2.16</log4j.version>
        <jetty.version>8.1.16.v20140903</jetty.version>
    </properties>
</project>
